/*
Jordan Amberg
Joseph Trembley
Cole Eichacker
Samuel Kidane
Sami Bensellam
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

void generateWord(FILE *fileName, char* wordArray);
void moveWords();
int detectWord(FILE* wordList);
void startGame(FILE *wordList);

int main(){
	char playOrAdd;
	char userAddWord[10];
	int minWordLength;
	FILE *fp = fopen("wordList.txt", "r+");
	int wordLeft;

	printf("Hello, this is a typing game. You will need to type the words as they appear.\nWould you like to play or add a word?\nYou currently have %d words that can be used. (Type 'p' for play or 'a' to add words)", wordLeft);
	scanf(" %c", &playOrAdd);
		while(playOrAdd == 'a'){
		printf("Type a word that you want to add(one word, no spaces)\n");
		scanf(" %s",userAddWord);
		fprintf(fp, "\n");
		fprintf(fp, "%s", userAddWord);  //make word go to file
		fclose(fp);
		FILE *fp = fopen("wordList.txt", "r+");
		printf("Your word has been added.\n Would you like to add another word? (Type 'p' or 'a')\n");
		scanf(" %c", &playOrAdd);
	}

	while(playOrAdd == 'p'){
		printf("What would you like your minimum word length to be?\n");
		scanf(" %d", &minWordLength);
	}
	return 0;
}



void generateWord(FILE *fileName, char* randomWords){
    srand(time(NULL));
    char thrownLine[50]; //Stores the previous lines so that they do not get put onto the board
    int randomLine = 0;
    randomLine = (rand() % 1000) + 1; //Generates which line the word will be at in the file
    //The loop puts the values of the preceding lines into the thrownLine so it does not mix with the actual value
    for(int i = 1; i < randomLine; i++){
        fgets(thrownLine, randomLine, fileName);
    }
    fgets(randomWords, randomLine, fileName);
    printf("%s", (randomWords)); //Can be edited later to reflect how it should print on the board
}


void moveWords(){

}

int detectWord(FILE* wordList){
	char wordArray[10][50];
	char tempWordVar[50];
	int numWords = 3;
	for(int i = 1; i < numWords; i++){
		generateWord(wordList, &tempWordVar);
	   	strcpy(wordArray[i], tempWordVar); 
	}
	char input[50];
	scanf("%s", input);
	printf("Hello\n");
	printf("%s\n", input);
	for(int i = 1; i < numWords; i++){
	    printf("%s\n", wordArray[i]);
	}
	for(int i = 0; i < 10; i++){
	    if(strncmp(input, wordArray[i], strlen(wordArray[i]) - 2) == 0){
	        wordArray[i][0] = '\0';
	        return 1;
	    }
	}
}

void startGame(FILE *wordList){
    struct timeval start, end; //Used to calculate time between last input and current input
    int timeBetween = 0;
    int newTime = 25;
    int wordCorrect = 0;
    gettimeofday(&start, NULL);
    while(newTime > 0){
        wordCorrect = detectWord(wordList);
        if(wordCorrect == 1){
            gettimeofday(&end, NULL);
            timeBetween = fabs((end.tv_sec - start.tv_sec));
    	    newTime -= timeBetween;
    	    printf("Your time was %d seconds\n", timeBetween);
        }else{
            printf("Your word is not on the board\n");
        }
        wordCorrect = 0;
    }
    
}
